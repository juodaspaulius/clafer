// Basic "meta-model" infrastructure
// Krzysztof Czarnecki, Andrzej WÄ…sowski
// 20140711 v 0.2



abstract DescribedElement
	descr -> string ?

abstract Domain

abstract Feature
	xor mode
		inactive
		active
		failed

abstract FeatureInteraction :DescribedElement

abstract Requirement :DescribedElement

// Model of power windows
abstract Button :Domain
	xor state
		pressedDown
		pressedUp
		neutral

abstract SingleWindowSys

	// it is important that we specify the domain behavioral constraints
	// automata constraints actually have to be nested, otherwise we need
	// to add an extra guard.
	Window :Domain
		xor state
			xor moving
				goingUp --> fullyClosed || partiallyOpen
				goingDown --> fullyOpen || partiallyOpen
			initial xor stopped
				fullyOpen --> goingUp
				fullyClosed --> goingDown
				partiallyOpen --> moving

	Button :Button


	NormalOperationOpen :Feature
		xor mode
			active
				R1_1 :Requirement
					[ descr = "If pressedDown, window is going down until fullyOpen" ]
					[ pressedDown => goingDown U (fullyOpen || no pressedDown) ]
				R1_2 :Requirement
					[ descr = "If neutral, window stops" ]
					[ neutral => stopped ]
			failed
				[stopped]
			inactive
				[stopped]

	NormalOperationClose :Feature ?
		xor mode
			active
				R2_1 :Requirement
					[ descr = "If pressedUp, window is going up until fullyClosed" ]
					[ pressedUp => goingUp U (fullyClosed || no pressedUp) ]
				R2_2 :Requirement
					[ descr = "If neutral, window stops" ]
					[ neutral => stopped ]
			failed
				[stopped]
			inactive
				[stopped]

	NormalOpenClose :FeatureInteraction
		[NormalOperationClose.mode.failed <=> NormalOperationOpen.mode.failed]




abstract PowerWindowSystem
	RearWindowSys :SingleWindowSys

	DriverWindowSys :SingleWindowSys
		RearWindowLockSubsystem ?
			RearWindowLockButton :Domain
				xor state
					locked
					unlocked

			RearWindowLock :Feature
				xor mode
					active
						R3_1 :Requirement
						[ descr = "Rear windows can't be moved as long as the rear window is locked" ]
						[ locked => RearWindowSys.state.stopped ]
					inactive // would be useful to drop this here. Possible?
					fail // TODO


		RearWindowControlSubsystem ?
			RearWindowControlButton :Button

			DriverOperationOpen :Feature
				xor mode
					active
						R4_1 :Requirement
							[ descr = "If driver button pressedDown, rear window is going down until fullyOpen" ]
							[ RearWindowControlButton.pressedDown
								=> goingDown U (fullyOpen || no pressedDown) ]
						R4_2 :Requirement
							[ descr = "If driver button neutral, window stops" ]
							[ RearWindowControlButton.neutral => stopped ]
					failed
						[stopped]
					inactive
						[stopped]

			DriverOperationClose :Feature
				xor mode
					active
						R5_1 :Requirement
							[ descr = "If driver button pressedUp, window is going up until fullyClosed" ]
							[ RearWindowControlButton.pressedUp
								=> goingUp U (fullyClosed || no pressedUp) ]
						R5_2 :Requirement
							[ descr = "If driver button neutral, window stops" ]
							[ neutral => stopped ]
					failed
						[stopped]
					inactive
						[stopped]

			BothPressed : FeatureInteraction

					[ descr = "if both buttons are pressed then movement features are deactivated" ]
					[ no RearWindowControlButton.neutral && no Button.neutral
					=> DriverOperationOpen.inactive && DriverOperationClose.inactive &&
						NormalOperationClose.inactive && NormalOperationOpen.inactive]

					[ descr = "otherwise you allow activation again" ]

			// there is a choice between an arbiter of the two buttons
			// or modeling activation criteria for features
			// another option is to complicate the modes (must be inactive,
			// does not have to be inactive)

			// TODO: refactor to introduce more reuse







	LockInteraction :FeatureInteraction 1
		[ descr = "normal operations are not active in locked mode, and active otherwise" ]
		[ locked <=> no NormalOperationClose.active ]
		[ locked <=> no NormalOperationOpen.active  ]


// show me some short scenarios [ scenario minimization would be useful ]

// also we need an ability to give scenarios explicitly (partial
// too)

// explore only regular behavior
// [no Feature.mode.failed]

// [F RearWindowSys.FullyClosed]
// [F RearWindowSys.FullyOpen]

// write scenarios, that could be abstract, both positive and negative

// Rao: Fixed the syntactic errors by removing '/*' and two '_' characters at lines 137 and 142.
// The file successfully passed the parser check.

